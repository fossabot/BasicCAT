AppType=JavaFX
Build1=Default,org.xulihang.basiccat
File1=.gitignore
File10=dictList.txt
File11=dictWebview.bjl
File12=editor.bjl
File13=editor.css
File14=ErrorReporter.bjl
File15=fc.conf
File16=filterProjectSetting.bjl
File17=FontPicker.bjl
File18=Fonts.xml
File19=generalProjectSetting.bjl
File2=appearance.bjl
File20=generalSetting.bjl
File21=HistoryItem.bjl
File22=HistoryViewer.bjl
File23=importDialog.bjl
File24=inputbox.bjl
File25=inputTextArea.bjl
File26=lang.conf
File27=LangaugePairSelector.bjl
File28=langcodes.txt
File29=languageChooser.bjl
File3=autocomplete.bjl
File30=languagesWithoutSpace.txt
File31=leftProject.bjl
File32=Log.bjl
File33=lowerRight.bjl
File34=main.bjl
File35=menuText.txt
File36=MTCompare.bjl
File37=mtparamfiller.bjl
File38=mtSetting.bjl
File39=oneterm.bjl
File4=autocorrectItem.bjl
File40=operation.bjl
File41=pdf2txt.bjl
File42=pluginsSetting.bjl
File43=preferences.bjl
File44=preferences.conf
File45=pretranslate.bjl
File46=preview.bjl
File47=progress.bjl
File48=projectSetting.bjl
File49=quickfillSetting.bjl
File5=autocorrectSetting.bjl
File50=richtext.css
File51=right.bjl
File52=right-aligned-richtext.css
File53=searchandreplace.bjl
File54=SearchAndReplaceRecorder.bjl
File55=searchTableView.bjl
File56=SearchView.bjl
File57=segment.bjl
File58=segmentation_en.conf
File59=segmentation_en_exception.conf
File6=basiccat.jpg
File60=segmentation_en_idml.conf
File61=segmentation_zh.conf
File62=segmentation_zh_exception.conf
File63=segmentationRules.srx
File64=SegmentationRulesManager.bjl
File65=segmentUsingTextArea.bjl
File66=serverLanucher.bjl
File67=settingLanguagecheck.bjl
File68=settingVersionControl.bjl
File69=SourceEditor.bjl
File7=checkList.bjl
File70=statistics.bjl
File71=stopwords.txt
File72=supportedFiles.txt
File73=tableview.bjl
File74=tabpane.bjl
File75=teamSetting.bjl
File76=term.bjl
File77=TermEditor.bjl
File78=TermManager.bjl
File79=termSetting.bjl
File8=confirmReview.bjl
File80=timestamp.bjl
File81=TMEditor.bjl
File82=TMManager.bjl
File83=tmSetting.bjl
File84=upperRight.bjl
File85=version.txt
File86=viewSegment.bjl
File87=webview.css
File88=wordLookupSetting.bjl
File9=dark.css
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup13=Default Group
FileGroup14=Default Group
FileGroup15=Default Group
FileGroup16=Default Group
FileGroup17=Default Group
FileGroup18=Default Group
FileGroup19=Default Group
FileGroup2=Default Group
FileGroup20=Default Group
FileGroup21=Default Group
FileGroup22=Default Group
FileGroup23=Default Group
FileGroup24=Default Group
FileGroup25=Default Group
FileGroup26=Default Group
FileGroup27=Default Group
FileGroup28=Default Group
FileGroup29=Default Group
FileGroup3=Default Group
FileGroup30=Default Group
FileGroup31=Default Group
FileGroup32=Default Group
FileGroup33=Default Group
FileGroup34=Default Group
FileGroup35=Default Group
FileGroup36=Default Group
FileGroup37=Default Group
FileGroup38=Default Group
FileGroup39=Default Group
FileGroup4=Default Group
FileGroup40=Default Group
FileGroup41=Default Group
FileGroup42=Default Group
FileGroup43=Default Group
FileGroup44=Default Group
FileGroup45=Default Group
FileGroup46=Default Group
FileGroup47=Default Group
FileGroup48=Default Group
FileGroup49=Default Group
FileGroup5=Default Group
FileGroup50=Default Group
FileGroup51=Default Group
FileGroup52=Default Group
FileGroup53=Default Group
FileGroup54=Default Group
FileGroup55=Default Group
FileGroup56=Default Group
FileGroup57=Default Group
FileGroup58=Default Group
FileGroup59=Default Group
FileGroup6=Default Group
FileGroup60=Default Group
FileGroup61=Default Group
FileGroup62=Default Group
FileGroup63=Default Group
FileGroup64=Default Group
FileGroup65=Default Group
FileGroup66=Default Group
FileGroup67=Default Group
FileGroup68=Default Group
FileGroup69=Default Group
FileGroup7=Default Group
FileGroup70=Default Group
FileGroup71=Default Group
FileGroup72=Default Group
FileGroup73=Default Group
FileGroup74=Default Group
FileGroup75=Default Group
FileGroup76=Default Group
FileGroup77=Default Group
FileGroup78=Default Group
FileGroup79=Default Group
FileGroup8=Default Group
FileGroup80=Default Group
FileGroup81=Default Group
FileGroup82=Default Group
FileGroup83=Default Group
FileGroup84=Default Group
FileGroup85=Default Group
FileGroup86=Default Group
FileGroup87=Default Group
FileGroup88=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=abplugin
Library10=jb4xencryption
Library11=jbitmapcreator
Library12=jcore
Library13=jfx
Library14=jokhttputils2
Library15=jpoi
Library16=jrandomaccessfile
Library17=jreflection
Library18=jshell
Library19=json
Library2=apachestringutilsb4j
Library20=jsql
Library21=jstringutils
Library22=jxui
Library23=okhttp
Library24=threading
Library25=xmlbuilder
Library26=jxmlsaxenhanced
Library3=b4jdragtome
Library4=b4xcollections
Library5=byteconverter
Library6=cssutils
Library7=encryption
Library8=javaobject
Library9=jawtrobot
Module1=AutoSaver
Module10=FileChooserUtils
Module11=FileUtils
Module12=filterGenericUtils
Module13=FontPicker
Module14=git
Module15=HistoryRecord
Module16=HistoryViewer
Module17=icu4j
Module18=idmlFilter
Module19=idmlUtils
Module2=CallSubUtils
Module20=importDialog
Module21=InputBox
Module22=InputTextAreaBox
Module23=ITP
Module24=jieba
Module25=KeyValueStore
Module26=LangCodeSearchView
Module27=languageChooser
Module28=LanguagePairSelector
Module29=LanguageTool
Module3=ClientKVS
Module30=LanguageUtils
Module31=Map2Xml
Module32=MT
Module33=MTCompare
Module34=MTParamsFiller
Module35=opennlp
Module36=OperationDialog
Module37=PathSaver
Module38=PDF2TXT
Module39=pdfbox
Module4=confirmReviewDialog
Module40=POIWord
Module41=Preferences
Module42=preTranslateDialog
Module43=Previewer
Module44=progressDialog
Module45=Project
Module46=ProjectSettings
Module47=RichTextArea
Module48=searchAndReplaceDialog
Module49=SearchAndReplaceRecorder
Module5=coordinate
Module50=SearchView
Module51=segmentation
Module52=SegmentationRulesManager
Module53=serverLauncher
Module54=SimpleTag
Module55=SourceTextEditor
Module56=SRX
Module57=statistics
Module58=TagKind
Module59=TBX
Module6=dictWebView
Module60=Term
Module61=TermEditor
Module62=TermManager
Module63=TextFlow
Module64=Theme
Module65=tikal
Module66=TimestampCalculator
Module67=TM
Module68=TMDB
Module69=TMEditor
Module7=editDistance
Module70=TMManager
Module71=TMXExporter
Module72=TMXImporter
Module73=txtFilter
Module74=Utils
Module75=viewSegment
Module76=xliffFilter
Module77=Xml2Map
Module78=XMLBuilder2
Module79=XmlNode
Module8=EnumClass
Module80=XmlParser
Module81=XMLUtils
Module82=zip4j
Module9=ErrorReporter
NumberOfFiles=88
NumberOfLibraries=26
NumberOfModules=82
Version=8.9
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600
#End Region


#AdditionalJar: sqlite-jdbc-3.23.1
#AdditionalJar: bcprov-jdk15on-154
#AdditionalJar: fuzzywuzzy-1.1.10
#AdditionalJar: zip4j-1.3.2
#AdditionalJar: opennlp-tools-1.9.0
#AdditionalJar: icu4j
#AdditionalJar: richtextfx-fat-latest
#AdditionalJar: jieba-analysis-1.0.2

'-------- for jgit
#AdditionalJar: org.eclipse.jgit-5.1.1.201809181055-r
#AdditionalJar: jsch-0.1.54
#AdditionalJar: jzlib-1.1.1
#AdditionalJar: JavaEWAH-1.1.6
#AdditionalJar: slf4j-api-1.7.2
#AdditionalJar: slf4j-simple-1.7.25

'-------- for alimt
#AdditionalJar: aliyun-java-sdk-alimt-1.0.3
#AdditionalJar: aliyun-java-sdk-core-4.4.2
#AdditionalJar: httpcore-4.4.9
#AdditionalJar: httpclient-4.5.6
#AdditionalJar: gson-2.8.5

'-------- for pdfbox
#AdditionalJar: pdfbox-2.0.12
#AdditionalJar: fontbox-2.0.12
#AdditionalJar: commons-logging-1.2

Sub Process_Globals
	Private fx As JFX
	Public MainForm As Form
	Private mainSplitPane As SplitPane
	Private upperRightSplitPane As SplitPane
	Private rightSplitPane As SplitPane
	Public editorLV As ListView
	Public projectTreeTableView As TreeTableView
	Public currentProject As Project
	Private lowerRightSplitPane As SplitPane
	Public TabPane1 As TabPane
	Public LogWebView As WebView
	Public tmTableView As TableView
	Public searchTableView As TableView
	Private addTermButton As Button
	Public sourceTermTextField As TextField
	Public targetTermTextField1 As TextField
	Public termLV As ListView
	Public calculatedHeight As Map
	Public preferencesMap As Map
	Private contextWebView As WebView
	Private segmentSearchToggleButton As ToggleButton
	Private TMViewToggleButton As ToggleButton
	Private viewTMTextArea As TextArea
	Private segmentLabel As Label
	Private MenuBar1 As MenuBar
	Public pre As Previewer
	Private operationLabel As Label
	Private checkLV As ListView
	Public nlp As opennlp
	Public plugin As ABPlugin
	Private dw As dictWebView
	Type Item (UserField As String, KeyField As String, ValueField() As Byte, IdField As Long, TimeField As Long)
	Type Task (TaskName As String, TaskItem As Item, TaskKey As String)
	Type Range (firstIndex As Int,lastIndex As Int)
	Type Progress (Done As Int,Total As Int)
	Private Drag As B4JDragToMe
	Private projectAutoSaver As AutoSaver
	Public TargetFileGeneratingProgress As Progress
	Private statusBar As Pane
	Public jieba1 As jieba
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("main") 'Load the layout file.
	MainForm.Show

	init
	
	'Log(fx.Screens)
	'Log(GetSystemProperty("os.name","windows"))
	If Args.Length=1 Then
		Try
			openProject(Args(0))
		Catch
			Log(LastException)
		End Try
	End If
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Dim aErrorReporter As ErrorReporter
	aErrorReporter.Initialize
	aErrorReporter.ShowAndWait("error: "&Error&CRLF&"StackTrace: "&StackTrace)
	Return False
End Sub

Sub MainForm_Resize (Width As Double, Height As Double)
	adjustDividerPositions
	calculatedHeight.Clear
	CallSubDelayed(Me,"ListViewParent_Resize")
End Sub

Sub MainForm_CloseRequest (EventData As Event)
	If currentProject.IsInitialized Then
		If currentProject.contentChanged Then
			Dim result As Int
			result=fx.Msgbox2(MainForm,"Project is changed, save before exit?","","Yes","Cancel","Exit without saving",fx.MSGBOX_CONFIRMATION)
			Select result
				'yes -1, no -2, cancel -3
				Case -1
					currentProject.save
				Case -3
					EventData.Consume
			End Select
		End If
	End If
End Sub

Sub init

	mainSplitPane.LoadLayout("leftProject")
	mainSplitPane.LoadLayout("right")

	rightSplitPane.LoadLayout("upperRight")
	rightSplitPane.LoadLayout("lowerRight")
	
	upperRightSplitPane.LoadLayout("editor")
	upperRightSplitPane.LoadLayout("term")
	MainForm.Stylesheets.Add(File.GetUri(File.DirAssets, "editor.css"))
	editorLV.Id="editorLV"
	Dim jo As JavaObject
	jo=upperRightSplitPane
	addPositionChangedEvent(jo.RunMethodJO("getDividers",Null).RunMethodJO("get",Array(0)),"dividerPosition")
	
	lowerRightSplitPane.LoadLayout("Log")
	lowerRightSplitPane.LoadLayout("tabpane")
	
	TabPane1.LoadLayout("tableview", "TM Match")
	TabPane1.LoadLayout("searchTableView", "Segment Search")
	TabPane1.LoadLayout("checkList", "LanguageCheck")
	
	
	calculatedHeight.Initialize
	adjustDividerPositions
	preferencesMap.Initialize

	If File.Exists(File.DirData("BasicCAT"),"preferences.conf")=False Then
		File.Copy(File.DirAssets,"preferences.conf",File.DirData("BasicCAT"),"preferences.conf")
	End If
	Dim json As JSONParser
	json.Initialize(File.ReadString(File.DirData("BasicCAT"),"preferences.conf"))
	preferencesMap=json.NextObject
	
	tmTableView.SetColumnWidth(1,200)
	tmTableView.SetColumnWidth(2,200)
	AddRecentsToMenu("recent_projects")
	AddRecentsToMenu("recent_langpairs")
	Utils.disableMenuItems(MenuBar1,Array As String("_Save","_Close"))
	Utils.disableMenuItems(MenuBar1,File.ReadList(File.DirAssets,"menuText.txt"))
	Drag.Initialize(projectTreeTableView, "Drag")
	loadPlugins
	setupStyleSheets
	initializeNLP("en")
	'useMacMenuBar
	'CSSUtils.SetStyleProperty(lowerRightSplitPane,"-fx-base","rgba(60, 63, 65, 255)")
End Sub

Sub useMacMenuBar
	If Utils.DetectOS="mac" Then
		MainForm.RootPane.SetAnchors(mainSplitPane,0,0,0,20)
		Dim menuBarJO As JavaObject=MenuBar1
		menuBarJO.RunMethod("setUseSystemMenuBar",Array(True))
	End If
End Sub

Sub setupStyleSheets
	'MainForm.Stylesheets.Add(File.GetUri(File.DirAssets, "custom.css"))
	If preferencesMap.GetDefault("customCSS_enabled",False)=True Then
		Theme.load(MainForm,preferencesMap.GetDefault("customCSSDir",File.DirApp))
		CSSUtils.SetBackgroundColor(statusBar,Theme.StatusBarColor(preferencesMap.GetDefault("customCSSDir",File.DirApp)))
	Else
		If preferencesMap.GetDefault("darktheme",False)=True Then
			MainForm.Stylesheets.Add(File.GetUri(File.DirAssets, "dark.css"))
			CSSUtils.SetStyleProperty(TabPane1,"-fx-base","rgba(60, 63, 65, 255)")
			CSSUtils.SetBackgroundColor(statusBar,fx.Colors.DarkGray)
		End If
	End If
	LoadHTMLWithBackground(LogWebView,"")
	Utils.SetWebViewStyleSheet(LogWebView)
End Sub

Public Sub initializeNLP(sourcelang As String)
	Try
		nlp.Initialize(sourcelang)
	Catch
		Log(LastException)
	End Try
End Sub


Public Sub loadPlugins
	Dim dir As String
	If preferencesMap.ContainsKey("pluginDir") Then
		dir=preferencesMap.Get("pluginDir")
	Else
		dir=File.Combine(File.DirApp,"plugins")
	End If
	plugin.Initialize("plugin",dir, "MyKey")
	plugin.Start(1)
	Log(plugin.GetAvailablePlugins)
End Sub

Sub plugin_PluginsChanged()
	Log("plugins have changed!")
	Log(plugin.GetAvailablePlugins)
	plugin.Stop
End Sub

Sub Drag_ReceivedFilePath (Filepath As String)
	If Filepath.EndsWith(".bcp") Then
		openProject(Filepath)
		Return
	End If
	If currentProject.IsInitialized=False Then
		fx.Msgbox(MainForm,"Please first open a project.","")
		Return
	End If
	If currentProject.path="" Then
		fx.Msgbox(MainForm,"Please first save the project.","")
		Return
	End If
	If File.IsDirectory(Filepath,"")=False Then
		addFile(Filepath)
	Else
		addFolder(Filepath)
	End If
End Sub

Sub adjustDividerPositions
	mainSplitPane.DividerPositions=Array As Double(0.2)
	rightSplitPane.DividerPositions=Array As Double(0.8)
	
	lowerRightSplitPane.DividerPositions=Array As Double(0.2)
	upperRightSplitPane.DividerPositions=Array As Double(0.8)
End Sub

Public Sub addProjectTreeTableItem
	For Each item As String In Array As String("Project Files","Translation Memory","Terminology","Statistics","Preview")
		Dim lbl As Label
		lbl.Initialize("lbl")
		lbl.Text=item
		If item="Project Files" Then
			Dim cm As ContextMenu
			cm.Initialize("cm")
			Dim mi As MenuItem
			mi.Initialize("Add File","addFileMi")
			Dim mi2 As MenuItem
			mi2.Initialize("Add Folder","addFolderMi")
			Dim mi3 As MenuItem
			mi3.Initialize("Reimport Files","reimportFilesMi")
			cm.MenuItems.Add(mi)
			cm.MenuItems.Add(mi2)
			cm.MenuItems.Add(mi3)
			lbl.ContextMenu=cm
		End If
		
		Dim tti As TreeTableItem
		tti.Initialize("tti",Array As Object(lbl))
		
		projectTreeTableView.Root.Children.Add(tti)
	Next
End Sub

Sub MenuBar1_Action
	Dim mi As MenuItem
	mi=Sender
	Log(mi.Text)
	Select mi.Text
		Case "_Open"
			If currentProject.IsInitialized Then
				fx.Msgbox(MainForm,"Please close the current project first.","")
				Return
			End If
			Dim fc As FileChooser
			fc.Initialize
			fc.InitialDirectory=PathSaver.previousPath("project")
			fc.SetExtensionFilter("project files",Array As String("*.bcp"))
			Dim path As String
			path=fc.ShowOpen(MainForm)
			If path="" Then
				Return
			End If
			PathSaver.savePath("project",path)
			openProject(path)
		Case "clear recent projects"
			ClearRecents("recent_projects")
		Case "clear recent lang pairs"
			ClearRecents("recent_langpairs")
		Case "en to zh Project"
			newProject("en","zh")
		Case "zh to en Project"
			newProject("zh","en")
		Case "other language pair"
			Dim languageSelector As LanguagePairSelector
			languageSelector.Initialize
			Dim result As Map
			result=languageSelector.ShowAndWait("","")
			If result.ContainsKey("source") Then
				newProject(result.Get("source"),result.Get("target"))
			End If
		Case "_Save"
			saveProject
		Case "_Generate target files"
			If currentProject.IsInitialized=False Then
				Return
			End If
			currentProject.generateTargetFiles
		Case "Generate Bilingual Files (for xliff)"
			If currentProject.IsInitialized=False Then
				Return
			End If
			currentProject.generateBilingualTargetFiles
		Case "_Close"
			Log("closing")
			closeProject
		Case "The next untranslated segment"
			For i=currentProject.lastEntry To currentProject.segments.Size-1
				Dim bitext As List
				bitext=currentProject.segments.Get(i)
				If bitext.Get(1)="" Then
					ScrollTo(i)
					Exit
				End If
			Next
		Case "The segment of specified index"
			Dim inpbox As InputBox
			inpbox.Initialize
			ScrollTo(inpbox.showAndWait(currentProject.lastEntry))
		Case "Fill with the 1st one"
			fillWithTMOrMT(0,True)
		Case "Fill with the 2nd one"
			fillWithTMOrMT(1,True)
		Case "Fill with the 3rd one"
			fillWithTMOrMT(2,True)
		Case "Fill with the 4th one"
			fillWithTMOrMT(3,True)
		Case "Fill with the 5th one"
			fillWithTMOrMT(4,True)
		Case "Fill with the next tag"
			fillWithTheNextTag
		Case "Copy source text to target"
			copySourceToTarget
		Case "Search and replace"
			If currentProject.currentFilename<>"" Then
				Dim sap As searchAndReplaceDialog
				sap.Initialize(Array(currentProject.currentFilename))
				sap.show
			End If
		Case "_Global search and replace"
			Dim sap As searchAndReplaceDialog
			sap.Initialize(currentProject.files)
			sap.show
		Case "Show quickfill dropdown"
			showQuickfillDropdown
		Case "Show online dictionary dropdown"
			showDictDropdown
		Case "Show segment history"
			showSegmentHistory
		Case "Show/Edit notes of the current segmnet"
			If currentProject.segments.Size<>0 Then
				Dim inp As InputTextAreaBox
				inp.Initialize
				inp.showAndWait
			End If
		Case "Edit the source text of the current segment"
			editSource
		Case "Mark the current segment as neglected/not neglected"
			changeNeglectedStatus
		Case "Perform language check for the current segment"
			languageCheckCurrentSegment
		Case "Clear segments"
			clearSegments
		Case "Project _settings"
			If currentProject.IsInitialized=False Then
				fx.Msgbox(MainForm,"Please open a project first.","")
				Return
			End If
			Dim ps As ProjectSettings
			ps.Initialize
			Dim resultList As List
			resultList=ps.ShowAndWait
			If resultList.Get(0)<>"canceled" Then
				currentProject.saveSettings(resultList.Get(1))
			End If
		Case "Pre-_translate"
			If currentProject.IsInitialized=False Then
				fx.Msgbox(MainForm,"Please open a project first.","")
				Return
			End If
			If editorLV.Items.Size=0 Then
				fx.Msgbox(MainForm,"Please open a file first.","")
				Return
			End If
			Dim ptDialog As preTranslateDialog
			ptDialog.Initialize
			currentProject.preTranslate(ptDialog.ShowAndWait)
		Case "Git _commit"
			If currentProject.gitcommit(True,False)=False Then
				fx.Msgbox(MainForm,"Git not configured.","")
			End If
		Case "Git commit and _push"
			If currentProject.gitcommit(False,False)=False Then
				fx.Msgbox(MainForm,"Git not configured.","")
			End If
		Case "Open project _folder"
			If currentProject.IsInitialized Then
				fx.ShowExternalDocument(File.GetUri(currentProject.path,""))
			End If
		Case "_Exit"
			'Dim currentProject as Project
			If currentProject.IsInitialized Then
				If currentProject.projectTM.IsInitialized Then
					currentProject.projectTM.close
					Sleep(0)
				End If
			End If
			ExitApplication
		Case "Preferences"
			Dim pref As Preferences
			pref.Initialize
			pref.ShowAndWait
		Case "PDF2TXT"
			Dim p2t As PDF2TXT
			p2t.Initialize
			p2t.Show
		Case "Server Launcher"
			Dim sl As serverLauncher
			sl.Initialize
			sl.show
		Case "MT Compare"
			Dim mtc As MTCompare
			mtc.Initialize
			mtc.show
		Case "Segmentation Rules Manager"
			Dim srm As SegmentationRulesManager
			srm.Initialize
			srm.Show
		Case "Documentation"
			fx.ShowExternalDocument("http://docs.basiccat.org")
		Case "_About"
			Dim version As String
			version=File.ReadString(File.DirAssets,"version.txt")
			fx.Msgbox(MainForm,"BasicCAT "&version&CRLF&"@xulihang 2024","BasicCAT")
	End Select
End Sub

Sub ScrollTo(index As Int)
	If editorLV.Items.Size<>0 Then
		editorLV.ScrollTo(Max(0,index-1))
		If Abs(currentProject.lastEntry-index)>20 Then
			Log("long range")
			Sleep(500)
			editorLV.ScrollTo(Max(0,index-1))
		End If
	End If
End Sub

Sub editSource
	If currentProject.segments.Size<>0 Then
		Dim source,fullsource As String
		Dim segment As List = currentProject.segments.Get(currentProject.lastEntry)
		source=segment.Get(0)
		fullsource=segment.Get(2)
		Dim sourceEditor As SourceTextEditor
		sourceEditor.Initialize(source,fullsource)
		Dim editResult As Map
		editResult=sourceEditor.ShowAndWait
		If source<>editResult.GetDefault("source",source) Then
			source=editResult.GetDefault("source",source)
			fullsource=editResult.GetDefault("fullsource",fullsource)
			segment.Set(0,source)
			segment.Set(2,fullsource)
			If editorLV.Items.Size<>0 Then
				Try
					Dim p As Pane
					p=editorLV.Items.Get(currentProject.lastEntry)
				Catch
					Return
					Log(LastException)
				End Try
				Dim sourceTextArea As RichTextArea=p.GetNode(0).Tag
				sourceTextArea.Text=source
			End If
			currentProject.contentIsChanged
		End If
	End If
End Sub

Sub clearSegments
	If currentProject.segments.Size<>0 Then
		If fx.Msgbox2(MainForm,"Clear all segments' translation?","","Yes","","No",fx.MSGBOX_CONFIRMATION) = fx.DialogResponse.POSITIVE Then
			Dim index As Int=0
			For Each segment As List In currentProject.segments
				segment.Set(1,"")
				If editorLV.Items.Size<>0 Then
					If editorLV.Items.Get(index) Is Pane Then
						Dim p As Pane=editorLV.Items.Get(index)
						Dim ta As RichTextArea=p.GetNode(1).Tag
						ta.Text=""
					End If
				End If
				index=index+1
			Next
			currentProject.contentIsChanged
		End If
	End If
End Sub

Sub newProject(sourceLang As String,targetLang As String)
	If currentProject.IsInitialized Then
		fx.Msgbox(MainForm,"Please close the current project first.","")
		Return
	End If
	AddToRecents(sourceLang&","&targetLang,"recent_langpairs")
	AddRecentsToMenu("recent_langpairs")
	currentProject.Initialize
	currentProject.newProjectSetting(sourceLang,targetLang)
	MainForm.Title="Untitled-1"
	addProjectTreeTableItem
	Utils.enableMenuItems(MenuBar1,Array As String("_Save","_Close"))
End Sub

Sub saveProject
	If currentProject.IsInitialized=False Then
		Return
	End If
	setAutosave(True)
	If currentProject.path="" Then
		Dim fc As FileChooser
		fc.Initialize
		fc.InitialDirectory=PathSaver.previousPath("project")
		fc.Title="Please enter the folder name to store the project."
		Dim path As String
		path=fc.ShowSave(MainForm)
		If path="" Then
			Return
		End If
		PathSaver.savePath("project",path)
		If File.Exists(path,"") Then
			fx.Msgbox(MainForm,"There has already been a file.","")
			Return
		End If
		AddToRecents(File.Combine(path,"project.bcp"),"recent_projects")
		AddRecentsToMenu("recent_projects")
		currentProject.path=path
		currentProject.save
		MainForm.Title=path
		Utils.enableMenuItems(MenuBar1,File.ReadList(File.DirAssets,"menuText.txt"))
	Else
		currentProject.save
	End If
End Sub

Sub openProject(path As String)
	If currentProject.IsInitialized Then
		fx.Msgbox(MainForm,"Please close the current project first.","")
		Return
	End If
	If path.EndsWith(".bcp")=False Then
		fx.Msgbox(MainForm,"The project does not exist.","")
		Return
	End If
	AddToRecents(path,"recent_projects")
	AddRecentsToMenu("recent_projects")
	currentProject.Initialize
	currentProject.open(path)
	setAutosave(True)
	MainForm.Title=getProjectname(path)
	Utils.enableMenuItems(MenuBar1,Array As String("_Save","_Close"))
	Utils.enableMenuItems(MenuBar1,File.ReadList(File.DirAssets,"menuText.txt"))
End Sub

#region handle recents
Sub AddToRecents(path As String,recentType As String)
	Dim recents As List
	If File.Exists(File.DirData("BasicCAT"),recentType) Then
		recents=File.ReadList(File.DirData("BasicCAT"),recentType)
		If recents.IndexOf(path)<>-1 Then
			recents.RemoveAt(recents.IndexOf(path))
		End If
	Else
		recents.Initialize
	End If
	recents.InsertAt(0,path)
	If recents.Size>10 Then
		recents.RemoveAt(10)
	End If
	File.WriteList(File.DirData("BasicCAT"),recentType,recents)
End Sub

Sub ClearRecents(recentType As String)
	If File.Exists(File.DirData("BasicCAT"),recentType) Then
		File.Delete(File.DirData("BasicCAT"),recentType)
	End If
	ClearRecentsMenu(recentType)
End Sub

Sub ClearRecentsMenu(recentType As String) As Menu
	Dim fileMenu As Menu=MenuBar1.Menus.Get(0)
	Dim recentMenu As Menu
	If recentType="recent_projects" Then
		recentMenu=fileMenu.MenuItems.Get(1)
	Else
		Dim newProjectMenu As Menu=fileMenu.MenuItems.Get(2)
		recentMenu= newProjectMenu.MenuItems.Get(3)
	End If
	Do While recentMenu.MenuItems.Size>2
		recentMenu.MenuItems.RemoveAt(2)
	Loop
	Return recentMenu
End Sub

Sub AddRecentsToMenu(recentType As String)
	If File.Exists(File.DirData("BasicCAT"),recentType) Then
		Dim recentMenu As Menu=ClearRecentsMenu(recentType)
		For Each data As String In File.ReadList(File.DirData("BasicCAT"),recentType)
			Dim mi As MenuItem
			If recentType="recent_projects" Then
				mi.Initialize(data.Replace("project.bcp",""),"RecentProjectMI")
				mi.Tag=data
			Else
				mi.Initialize(data,"RecentLangPairMI")
			End If
			recentMenu.MenuItems.Add(mi)
		Next
	End If
End Sub

Sub RecentProjectMI_Action
	Dim mi As MenuItem=Sender
	Log(mi.Tag)
	openProject(mi.Tag)
End Sub

Sub RecentLangPairMI_Action
	Dim mi As MenuItem=Sender
	newProject(Regex.Split(",",mi.Text)(0),Regex.Split(",",mi.Text)(1))
End Sub
#end region

Public Sub closeProject
	setAutosave(False)
	If currentProject.IsInitialized Then
		If currentProject.projectTM.IsInitialized Then
			currentProject.projectTM.close
		End If
		Dim currentProject As Project
		tmTableView.ClearSelection
		tmTableView.Items.Clear
		projectTreeTableView.ClearSelection
		projectTreeTableView.Root.Children.Clear
		editorLV.Items.Clear
		termLV.Items.Clear
		MainForm.Title="BasicCAT"
		Utils.disableMenuItems(MenuBar1,Array As String("_Save","_Close"))
		Utils.disableMenuItems(MenuBar1,File.ReadList(File.DirAssets,"menuText.txt"))
	End If
End Sub

Sub setAutosave(enabled As Boolean)
	If projectAutoSaver.IsInitialized=False Then
		projectAutoSaver.Initialize
	End If
	projectAutoSaver.Enabled=enabled
End Sub

Sub fillWithTMOrMT(index As Int,fromShortcut As Boolean)
	If tmTableView.Items.Size>0 Then
		If fromShortcut Then
			If tmTableView.Items.Size-1>=index Then
				tmTableView.SelectedRow=index
			Else
				Return
			End If
		End If
		
		If tmTableView.SelectedRowValues<>Null And editorLV.Items.Size<>0 Then
			Try
				Dim pane As Pane
				pane=editorLV.Items.Get(currentProject.lastEntry)
			Catch
				Log(LastException)
				Return
			End Try
			Dim sourceLbl As Label=tmTableView.SelectedRowValues(1)
			Dim translationLbl As Label=tmTableView.SelectedRowValues(2)
			Dim source As String=sourceLbl.Text
			Dim translation As String=translationLbl.Text
			currentProject.setTranslation(currentProject.lastEntry,translation,True,source)
			currentProject.fillOne(currentProject.lastEntry,translation)
			'Dim targetTextArea As TextArea
			'targetTextArea=pane.GetNode(1)
			'targetTextArea.Text=translation
			currentProject.contentIsChanged
		End If
	End If
End Sub

Sub fillWithTheNextTag
	If editorLV.Items.Size=0 Then
		Return
	End If
	Try
		Dim p As Pane
		p=editorLV.Items.Get(currentProject.lastEntry)
	Catch
		Return
		Log(LastException)
	End Try

	Dim sourceTextArea As RichTextArea=p.GetNode(0).Tag
	Dim targetTextArea As RichTextArea=p.GetNode(1).tag
	
	Dim tagsInSource As List
	tagsInSource.Initialize
	Dim tagMatcher As Matcher=Regex.Matcher("<.*?>",sourceTextArea.Text)
	Do While tagMatcher.Find
		tagsInSource.Add(tagMatcher.Match)
	Loop
	
	Dim tagsInTarget As List
	tagsInTarget.Initialize
	Dim tagMatcher As Matcher=Regex.Matcher("<.*?>",targetTextArea.Text)
	Do While tagMatcher.Find
		tagsInTarget.Add(tagMatcher.Match)
	Loop
	
	For Each tag As String In tagsInTarget
		Try
			tagsInSource.RemoveAt(tagsInSource.IndexOf(tag))
		Catch
			Log(LastException)
		End Try
	Next
	If tagsInSource.Size<>0 Then
		Dim selectionStart As Int=targetTextArea.SelectionStart
		Dim selectionEnd As Int=targetTextArea.selectionEnd
		Dim tag As String=tagsInSource.Get(0)
		targetTextArea.Text = targetTextArea.Text.SubString2(0,selectionStart)&tag&targetTextArea.Text.SubString2(selectionEnd,targetTextArea.Text.Length)
		targetTextArea.SetSelection(selectionStart+tag.Length,selectionStart+tag.Length)
	End If
End Sub

Sub copySourceToTarget
	If editorLV.Items.Size=0 Then
		Return
	End If
	Try
		Dim p As Pane
		p=editorLV.Items.Get(currentProject.lastEntry)
	Catch
		Return
		Log(LastException)
	End Try
	Dim sourceTextArea As RichTextArea=p.GetNode(0).Tag
	Dim targetTextArea As RichTextArea=p.GetNode(1).Tag
	targetTextArea.Text=sourceTextArea.Text
	currentProject.contentIsChanged
End Sub

Sub showQuickfillDropdown
	If editorLV.Items.Size=0 Then
		Return
	End If
	
	Try
		Dim p As Pane
		p=editorLV.Items.Get(currentProject.lastEntry)
	Catch
		Log(LastException)
		Return
	End Try


	Dim ta As RichTextArea=p.GetNode(1).Tag
	Dim cm As ContextMenu
	cm.Initialize("")
	Dim quickfillList As List
	quickfillList.Initialize
	If currentProject.settings.ContainsKey("quickfill_includeterm") Then
		If currentProject.settings.Get("quickfill_includeterm")=True Then
			For Each termPane As Pane In termLV.Items
				quickfillList.Add(termPane.Tag)
			Next
		End If
	End If
	If currentProject.settings.ContainsKey("quickfill") Then
		quickfillList.AddAll(currentProject.settings.Get("quickfill"))
	Else
		quickfillList.AddAll(Array As String("——","¥","©","®","™","『","』"))
	End If
	
	For Each item As String In quickfillList
		If item="" Then 
			Continue
		End If
		Log(item)
		Dim mi As MenuItem
		mi.Initialize(item,"quickFillMi")
		mi.Tag=item
		cm.MenuItems.Add(mi)
	Next
	Dim map1 As Map
	map1=Utils.GetScreenPosition(ta.BasePane)
	Dim jo As JavaObject = cm
	jo.RunMethod("show", Array(ta.BasePane, map1.Get("x")+ta.Width/10, map1.Get("y")+ta.Height))
End Sub

Sub quickFillMi_Action
	Dim mi As MenuItem
	mi=Sender
	Log(mi.Text)
	Log(mi.Tag)
	Try
		Dim p As Pane
		p=editorLV.Items.Get(currentProject.lastEntry)
	Catch
		Log(LastException)
		Return
	End Try
	Dim ta As RichTextArea=p.GetNode(1).Tag
	Dim selectionEnd As Int=ta.selectionEnd
	ta.Text=ta.Text.SubString2(0,ta.SelectionEnd)&mi.Text&ta.Text.SubString2(ta.SelectionEnd,ta.Text.Length)
	ta.SetSelection(selectionEnd+mi.Text.Length,selectionEnd+mi.Text.Length)
End Sub

Sub showSegmentHistory
	If editorLV.Items.Size=0 Then
		Return
	End If
	Try
		Dim p As Pane
		p=editorLV.Items.Get(currentProject.lastEntry)
	Catch
		Log(LastException)
		Return
	End Try

	Dim ta As RichTextArea=p.GetNode(0).Tag
    Dim hisViewer As HistoryViewer
	hisViewer.Initialize
	Dim historyList As List
	historyList=currentProject.projectHistory.getSegmentHistory(ta.Text,currentProject.currentFilename)
	hisViewer.Show(historyList)
End Sub

Sub showDictDropdown
	If editorLV.Items.Size=0 Then
		Return
	End If
	Try
		Dim p As Pane
		p=editorLV.Items.Get(currentProject.lastEntry)
	Catch
		Log(LastException)
		Return
	End Try
	Dim ta As RichTextArea=p.GetNode(0).Tag
	Dim selected As String
	selected=ta.Text.SubString2(ta.SelectionStart,ta.SelectionEnd)
	If selected="" Then
		Return
	End If
	Dim cm As ContextMenu
	cm.Initialize("cm")
	Dim dictMap As Map
    dictMap.Initialize
	Dim dictList As List
	Dim configPath As String=File.Combine(currentProject.path,"config")
	If File.Exists(configPath,"dictList.txt") Then
		dictList=File.ReadList(configPath,"dictList.txt")
	Else
		dictList=File.ReadList(File.DirAssets,"dictList.txt")
	End If
	
	For Each line As String In dictList
		dictMap.Put(Regex.Split("	",line)(0),Regex.Split("	",line)(1))
	Next
	
	For Each dictName As String In dictMap.Keys
		Dim mi As MenuItem
		mi.Initialize(dictName, "dictLookupMi")
        Dim url As String
		url=dictMap.Get(dictName)
		Dim tagList As List
		tagList.Initialize
		tagList.Add(url)
		tagList.Add(selected)
		mi.Tag=tagList
		cm.MenuItems.Add(mi)
	Next
	Sleep(100)

	Dim map1 As Map
	map1=Utils.GetScreenPosition(ta.BasePane)
	Log(map1)
	Dim jo As JavaObject = cm
	jo.RunMethod("show", Array(ta.BasePane, map1.Get("x")+ta.Width/10, map1.Get("y")+ta.Height))
End Sub

Sub dictLookupMi_Action
	Dim mi As MenuItem
	mi=Sender
	Log(Sender)
	Dim tagList As List
	tagList.Initialize
	tagList=mi.Tag
	If dw.IsInitialized=False Then
		dw.Initialize(currentProject.path)
	End If
	dw.show
	dw.loadUrl(tagList.Get(0),tagList.Get(1))
	
End Sub

Sub changeNeglectedStatus
	If currentProject.segments.Size<>0 Then
		Dim isNeglected As String="no"
		Dim segment As List
		segment=currentProject.segments.Get(currentProject.lastEntry)
		Dim extra As Map
		extra=segment.Get(4)
		If extra.ContainsKey("neglected") Then
			Select extra.Get("neglected")
				Case "yes"
					isNeglected="no"
				Case "no"
					isNeglected="yes"
			End Select
		Else
			isNeglected="yes"
		End If
		extra.Put("neglected",isNeglected)
		Try
			Dim p As Pane
			p=editorLV.Items.Get(currentProject.lastEntry)
		Catch
			Return
			Log(LastException)
		End Try
		Dim sourceTa As RichTextArea=p.GetNode(0).Tag
		Dim targetTa As RichTextArea=p.GetNode(1).Tag
		Select isNeglected
			Case "no"
				sourceTa.Enabled=True
				targetTa.Enabled=True
			Case "yes"
				sourceTa.Enabled=False
				targetTa.Enabled=False
		End Select
		currentProject.contentIsChanged
	End If
End Sub

Private Sub languageCheckCurrentSegment
	Try
		checkLVClear
		Dim p As Pane
		p=editorLV.Items.Get(currentProject.lastEntry)
		Dim targetTa As RichTextArea=p.GetNode(1).Tag
		currentProject.languagecheck(targetTa,currentProject.lastEntry)
	Catch
		Log(LastException)
	End Try
End Sub

Sub addFolderMi_Action
	If currentProject.IsInitialized=False Then
		fx.Msgbox(MainForm,"Please first open a project.","")
		Return
	End If
	If currentProject.path="" Then
		fx.Msgbox(MainForm,"Please first save the project.","")
	Return
	End If
	Dim dc As DirectoryChooser
	dc.Initialize
	dc.InitialDirectory=PathSaver.previousPath("folder")
	Dim path As String = dc.Show(MainForm)
	If path="" Then
		Return
	End If
	PathSaver.savePath("folder",path)
	addFolder(path)
End Sub

Sub addFolder(path As String)
	Dim files,okapiExtractedFiles As List
	files.Initialize
	okapiExtractedFiles.Initialize

	OperationDialog.Show
	OperationDialog.SetButtonText("Importing...")
	OperationDialog.EnableOkayButton(False)
	'progressDialog.Show("Importing...","import")
	'progressDialog.update(0,0)
	wait for (addFiles(path,files,"",okapiExtractedFiles)) complete (success As Boolean)
	
	For Each subfolder As String In FileUtils.GetSubFolders(path)
		Dim unixLikePath As String=path.Replace("\","/")
		Dim unixSubfolderPath As String=subfolder.Replace("\","/")
		wait for (addFiles(subfolder,files,unixSubfolderPath.Replace(unixLikePath&"/","")&"/",okapiExtractedFiles)) complete (success As Boolean)
	Next
	
	Log("files"&files)
	Dim imported As Int=0

	For Each filename As String In files
		Log(filename)
		Dim isExtractedbyOkapi As Boolean
		If okapiExtractedFiles.IndexOf(filename)<>-1 Then
			isExtractedbyOkapi=True
		Else
			isExtractedbyOkapi=False
		End If
		imported=imported+1
		'Sleep(0)
		'progressDialog.update(imported,files.Size)
		wait for (addFileInFolder(path,filename,isExtractedbyOkapi)) complete (result As Object)
		
	Next
	currentProject.save
	OperationDialog.SetButtonText("Okay")
	OperationDialog.EnableOkayButton(True)
	'progressDialog.close
End Sub

Sub addFileInFolder(path As String,filename As String,isExtractedbyOkapi As Boolean) As ResumableSub
	wait For(currentProject.addFileInFolder(path,filename,isExtractedbyOkapi)) complete (result As Boolean)
	If result=True Then
		OperationDialog.Add(Array As String(filename,"imported"))
	Else
		If currentProject.files.IndexOf(filename)<>-1 Then
			OperationDialog.Add(Array As String(filename,"already existed"))
		Else
			OperationDialog.Add(Array As String(filename,"importing failed"))
		End If
		
	End If
	Return True
End Sub

Sub addFiles(path As String,files As List,prefix As String,okapiExtractedFiles As List) As ResumableSub
	For Each filename As String In File.ListFiles(path)
		If File.IsDirectory(path,filename)=False Then
			If isFiletypeSupported(filename) And currentProject.settings.GetDefault("use_okapi_first",False)=False Then
				files.Add(prefix&filename)
			Else
				If currentProject.files.IndexOf(prefix&filename&".xlf")=-1 Then
					prefix=prefix.Replace("/",GetSystemProperty("file.separator","/"))
					Dim targetFilename As String
					targetFilename=File.Combine(File.Combine(File.Combine(currentProject.path,"source"),prefix),filename)
					FileUtils.createNonExistingDir(File.Combine(File.Combine(currentProject.path,"source"),targetFilename))
					Dim outputDir As String
					outputDir=File.GetFileParent(targetFilename)
					Dim sl,tl As String
					sl=currentProject.projectFile.Get("source")
					tl=currentProject.projectFile.Get("target")
					OperationDialog.Add(Array As String(prefix&filename,"converting to xliff using okapi"))
					wait for (tikal.extract(sl,tl,File.Combine(path,filename),outputDir,currentProject.settings.GetDefault("tikal_codeattrs",False))) complete (success As Boolean)
					If success=True Then
						files.Add(prefix&filename)
						okapiExtractedFiles.Add(prefix&filename)
					Else
						OperationDialog.Add(Array As String(prefix&filename,"failed"))
					End If
				Else
					OperationDialog.Add(Array As String(prefix&filename,"already existed"))
				End If
            End If
		End If
	Next
	Return True
End Sub

Sub isFiletypeSupported(filename As String) As Boolean
	filename=filename.ToLowerCase
	Dim extension As String=filename
	Try
		extension=filename.SubString2(filename.LastIndexOf(".")+1,filename.Length)
		Log(extension)
	Catch
		Log(LastException)
	End Try
	
	If supportedFilesList.IndexOf(extension)<>-1 Then
		Return True
	Else
		Return False
	End If
End Sub

Sub supportedFilesList As List
	Dim extensions As List
	extensions.Initialize
	Dim supportedFiles As List
	supportedFiles=File.ReadList(File.DirAssets,"supportedFiles.txt")
	For Each line As String In supportedFiles
		Dim data As List
		data.Initialize
		data.AddAll(Regex.Split("	",line))
		For i=1 To data.Size-1
			Dim extension As String
			extension=data.Get(i)
			extensions.Add(extension.Replace("*.",""))
		Next
	Next
	'exclude disabled
	Try
		If currentProject.filterIsEnabled("txt (BasicCAT)")=False Then
			extensions.RemoveAt(extensions.IndexOf("txt"))
		End If
		If currentProject.filterIsEnabled("idml (BasicCAT)")=False Then
			extensions.RemoveAt(extensions.IndexOf("idml"))
		End If
		If currentProject.filterIsEnabled("xliff (BasicCAT)")=False Then
			extensions.RemoveAt(extensions.IndexOf("xlf"))
			extensions.RemoveAt(extensions.IndexOf("xliff"))
		End If
	Catch
		Log(LastException)
	End Try

	For Each pluginName As String In plugin.GetAvailablePlugins
		If pluginName.EndsWith("Filter") Then
			extensions.Add(pluginName.Replace("Filter",""))
		End If
	Next
	Log("supported extensions:")
	Log(extensions)
	Return extensions
End Sub

Sub reimportFilesMi_Action
	If currentProject.IsInitialized=False Then
		fx.Msgbox(MainForm,"Please first open a project.","")
		Return
	End If
	If currentProject.path="" Then
		fx.Msgbox(MainForm,"Please first save the project.","")
		Return
	End If
	Log("reimporting...")
	For Each filename As String In currentProject.files
		wait for (currentProject.reimportFile(filename)) Complete (done As Object)
	Next
	fx.Msgbox(MainForm,"Done","")
End Sub

Sub addFileMi_Action
	Dim mi As MenuItem
	mi=Sender
	Log(mi.Text)
	If currentProject.IsInitialized=False Then
		fx.Msgbox(MainForm,"Please first open a project.","")
		Return
	End If
	If currentProject.path="" Then
		fx.Msgbox(MainForm,"Please first save the project.","")
		Return
	End If
	Dim fc As FileChooser
	fc.Initialize
	fc.InitialDirectory=PathSaver.previousPath("file")
	Dim supportedFiles As List
	supportedFiles=File.ReadList(File.DirAssets,"supportedFiles.txt")
	Dim descriptionList,filterList As List
	descriptionList.Initialize
	filterList.Initialize
	For Each filetype As String In supportedFiles
		Dim data As List
		data.Initialize
		data.AddAll(Regex.Split("	",filetype))
		For i=1 To data.Size-1
			descriptionList.Add(data.Get(0))
			filterList.Add(data.Get(i))
		Next
	Next
	Log(filterList)
	FileChooserUtils.AddExtensionFilters4(fc,descriptionList,filterList,True,"All",True)
	Dim path As String
	path=fc.ShowOpen(MainForm)
	If File.Exists(path,"") Then
		PathSaver.savePath("file",path)
		addFile(path)
	End If
End Sub

Sub addFile(path As String)
	Log(path)
	Log(getFilename(path))
	If path="" Then
		Return
	else if currentProject.files.IndexOf(getFilename(path))<>-1 Then
		fx.Msgbox(MainForm,"A file with the same name already exists.","")
		Return
	End If

	If isFiletypeSupported(File.GetName(path))=False  Or currentProject.settings.GetDefault("use_okapi_first",False)=True Then
		If currentProject.files.IndexOf(File.GetName(path)&".xlf")<>-1 Then
			fx.Msgbox(MainForm,"A file with the same name already exists.","")
			Return
		End If
		progressDialog.ShowWithoutProgressBar("Importing","import")
		progressDialog.update2("importing..."&path)
		Dim sl,tl As String
		sl=currentProject.projectFile.Get("source")
		tl=currentProject.projectFile.Get("target")

		wait for (tikal.extract(sl,tl,path,File.Combine(currentProject.path,"source"),currentProject.settings.GetDefault("tikal_codeattrs",False))) complete (success As Boolean)
		If success=True Then
			wait for (currentProject.addFile(path,True)) Complete (result As Object)
		Else
			fx.Msgbox(MainForm,"This file format is not supported.","")
		End If
	Else
		progressDialog.ShowWithoutProgressBar("Importing","import")
		progressDialog.update2("importing..."&path)
		wait for (currentProject.addFile(path,False)) Complete (result As Object)
		'Sleep(50)
	End If
	progressDialog.close
End Sub

Public Sub getFilename(path As String) As String
	Dim filename As String
	
	If GetSystemProperty("os.name","Windows").StartsWith("Windows") Then
		filename=path.SubString2(path.LastIndexOf("\")+1,path.Length)
	Else
		filename=path.SubString2(path.LastIndexOf("/")+1,path.Length)
	End If
	Log(filename)
	Return filename
End Sub

Public Sub getProjectname(path As String) As String
	Dim Projectname As String
	If GetSystemProperty("os.name","Windows").StartsWith("Windows") Then
		Projectname=path.SubString2(path.LastIndexOf("\"),path.Length)
		Projectname=path.Replace(Projectname,"")
	Else
		Projectname=path.SubString2(path.LastIndexOf("/"),path.Length)
		Projectname=path.Replace(Projectname,"")
		Log(LastException)
	End If
	Log(Projectname)
	Return Projectname
End Sub

'menu actions end
'-----------------------------

'editor relevant
'-----------------------------

Sub ListViewParent_Resize
	Dim lv As ListView
	lv=editorLV
	Dim visibleRange As Range=getVisibleRange(lv)
	Dim FirstVisibleIndex,LastVisibleIndex As Int
	FirstVisibleIndex=visibleRange.firstIndex
	LastVisibleIndex=visibleRange.lastIndex
	If lv.Items.Size=0 Then
		Return
	End If
	Dim ScrollBarWidth As Double=20dip
	
	If preferencesMap.GetDefault("customCSS_enabled",False)=True Then
		ScrollBarWidth=Theme.ScrollBarWidth(preferencesMap.GetDefault("customCSSDir",File.DirApp))
	End If

	Dim ExtraSize As Int
	ExtraSize=3
	For i = Max(0, FirstVisibleIndex - ExtraSize) To Min(LastVisibleIndex + ExtraSize,editorLV.Items.Size - 1)
		If lv.Items.Get(i) Is Pane Then
			Dim p As Pane
			p=lv.Items.Get(i)
		Else
			Continue
		End If
		Dim lineHeightTimes As Double
		lineHeightTimes=preferencesMap.GetDefault("lineheight",0)
		
		Dim sourceTa As RichTextArea = p.GetNode(0).Tag
		Dim targetTa As RichTextArea = p.GetNode(1).Tag

		sourceTa.LineHeightTimes=lineHeightTimes
		targetTa.LineHeightTimes=lineHeightTimes
		
		Dim taWidth As Double
		Dim sourceHeight,targetHeight As Double
		Dim showIndex As Boolean=preferencesMap.GetDefault("showindex",False)
		Dim vertical As Boolean=preferencesMap.GetDefault("vertical_view",False)
		Dim HeadPane As Pane=p.GetNode(2)
		Dim indexLabel As Label=HeadPane.GetNode(0)
		Dim left As Double
		Dim itemWidth As Double
		If showIndex Then
			HeadPane.Visible=True			
			indexLabel.Text=i+1
			left=indexLabel.PrefWidth
			itemWidth=lv.PrefWidth-indexLabel.PrefWidth
		Else
			HeadPane.Visible=False
			left=0
			itemWidth=lv.PrefWidth
		End If
		
		If vertical=False Then
			taWidth=itemWidth/2-ScrollBarWidth
			sourceTa.Left=left
			sourceTa.SetSize(taWidth,50)
			targetTa.Left=left+taWidth
			targetTa.Top=sourceTa.Top
			targetTa.SetSize(taWidth,50)			
			sourceHeight=sourceTa.totalHeight
			targetHeight=targetTa.totalHeight
		
			Dim h As Double=Max(25,Max(sourceHeight,targetHeight))
			p.Left=0
			p.SetSize(taWidth*2,h)
			sourceTa.SetSize(taWidth,h)
			targetTa.SetSize(taWidth,h)
		Else
			Dim space As Int=10
			taWidth=itemWidth-ScrollBarWidth*2
			sourceTa.Left=left
			targetTa.Left=left
			sourceTa.SetSize(taWidth,50)
			targetTa.SetSize(taWidth,50)
			sourceHeight=sourceTa.totalHeight
			targetHeight=targetTa.totalHeight
			
			targetTa.Top=sourceHeight+space
			p.Left=0
			p.SetSize(taWidth,sourceHeight+targetHeight+space)
			sourceTa.SetSize(taWidth,sourceHeight)
			targetTa.SetSize(taWidth,targetHeight)
		End If
		
		If showIndex Then
			HeadPane.PrefHeight=p.PrefHeight
			indexLabel.PrefHeight=p.PrefHeight
		End If

	Next
End Sub

Sub isScrollBarVisible(ta As TextArea) As Boolean
	Try
		Dim jo As JavaObject
		jo=ta
		Dim ScrollBar As JavaObject
		ScrollBar=jo.RunMethodJO("lookup",Array(".scroll-bar:vertical"))
		If ScrollBar=Null Then
			Return False
		Else
			Return ScrollBar.RunMethod("isVisible",Null)
		End If
	Catch
		Log(LastException)
		Return False
	End Try
End Sub

Sub ListView1_ScrollPosition_Changed(OldVal As Object,NewVal As Object)
	'Log(NewVal)
	CallSubDelayed(Me,"checkVisibleRange")
End Sub

Sub checkVisibleRange
	Try
		Sleep(50)
		Dim currentVisibleRange As Range
		currentVisibleRange=getVisibleRange(editorLV)
		'If previousRange.lastIndex<>currentVisibleRange.lastIndex Or previousRange.firstIndex<>currentVisibleRange.firstIndex Then
		'	Log("visible range changed")
		'	previousRange=currentVisibleRange
			currentProject.fillPane(currentVisibleRange.firstIndex,currentVisibleRange.lastIndex)
			CallSubDelayed(Me,"ListViewParent_Resize")
			currentProject.saveAlltheTranslationToSegmentsInVisibleArea(currentVisibleRange.firstIndex,currentVisibleRange.lastIndex)
		'End If
	Catch
		Log(LastException)
	End Try
End Sub

Sub addScrollChangedEvent(lv As ListView)
	Try
		Dim jo As JavaObject
		jo=lv
		Dim ListViewScrollBar As JavaObject
		ListViewScrollBar=jo.RunMethodJO("lookup",Array(".scroll-bar:vertical"))
		Dim r As Reflector
		r.Target=ListViewScrollBar
		r.AddChangeListener("ListView1_ScrollPosition","valueProperty")
	Catch
		Log(LastException)
	End Try
End Sub

Sub getVisibleRange(lv As ListView) As Range
	Dim visibleRange As Range
	visibleRange.Initialize
	Try
		Dim jo As JavaObject
		jo=lv
		Dim VirtualFlow As JavaObject
		VirtualFlow=jo.RunMethodJO("getSkin",Null).RunMethodJO("getChildren",Null).RunMethodJO("get",Array(0))
		Dim lastVisibleCell As JavaObject
		lastVisibleCell=VirtualFlow.RunMethodJO("getLastVisibleCell",Null)
		Dim firstVisibleCell As JavaObject
		firstVisibleCell=VirtualFlow.RunMethodJO("getFirstVisibleCell",Null)
		visibleRange.firstIndex=firstVisibleCell.RunMethod("getIndex",Null)
		visibleRange.lastIndex=lastVisibleCell.RunMethod("getIndex",Null)
	Catch
		Log(LastException)
	End Try
	Return visibleRange
End Sub

'other controls
'------------------------------

Sub searchTableView_MouseClicked (EventData As MouseEvent)
	If EventData.PrimaryButtonPressed Then
		If searchTableView.SelectedRowValues<>Null Then
			Dim indexLbl As Label=searchTableView.SelectedRowValues(0)
			Dim index As Int
			index=indexLbl.Text
			Log(index)
			Log(currentProject.segments.Get(index))
			Dim context As String
			'For i=Max(index-5,0) To Min(index+5,currentProject.segments.Size-1)
			'	Dim segment As List
			'	segment=currentProject.segments.Get(i)
			'	context=segment.Get(2)&context
			'Next
			For Each row() As Object In searchTableView.Items
				Dim indexLbl,sourceLbl,targetLbl As Label
				indexLbl=row(0)
				sourceLbl=row(1)
				targetLbl=row(2)
				context=context&indexLbl.Text&" "&sourceLbl.Text&CRLF&"  "&targetLbl.Text&CRLF&CRLF
			Next
			Dim viewSegmentForm As viewSegment
			viewSegmentForm.Initialize
			viewSegmentForm.show(context)
		End If
	End If
End Sub

Sub tmTableView_MouseClicked (EventData As MouseEvent)
	If EventData.ClickCount=2 Then
		fillWithTMOrMT(0,False)
	End If
End Sub

Sub addTermButton_MouseClicked (EventData As MouseEvent)
	If currentProject.IsInitialized Then
		currentProject.projectTerm.addTerm(sourceTermTextField.Text,targetTermTextField1.Text)
	End If
End Sub

Sub termLV_MouseClicked (EventData As MouseEvent)
	If termLV.SelectedItem<>Null And EventData.PrimaryButtonPressed Then
		Dim p As Pane
		p=termLV.SelectedItem
		Dim lbl As Label
		lbl=p.GetNode(1)
		Try
			Dim pane As Pane
			pane=editorLV.Items.Get(currentProject.lastEntry)
		Catch
			Log(LastException)
			Return
		End Try
		Dim targetTextArea As RichTextArea
		targetTextArea=pane.GetNode(1).Tag
		targetTextArea.Text=targetTextArea.Text.SubString2(0,targetTextArea.SelectionStart)&lbl.Text&targetTextArea.Text.SubString2(targetTextArea.SelectionStart,targetTextArea.Text.Length)
	End If
End Sub

Sub tmTableView_SelectedRowChanged(Index As Int, Row() As Object)
	If Row<>Null And Row.Length<>0 Then
		Try
			Dim pane As Pane
			pane=editorLV.Items.Get(currentProject.lastEntry)
		Catch
			Log(LastException)
			Return
		End Try
        Dim sourceLbl,translationLbl As Label
		sourceLbl=Row(1)
		translationLbl=Row(2)
		Dim sourceTextArea As RichTextArea
		sourceTextArea=pane.GetNode(0).Tag
		Dim fontsize As Int=preferencesMap.GetDefault("webview_fontsize",18)
		If sourceLbl.Text="" Then
			LoadHTMLWithBackground(LogWebView,Utils.buildHtmlString(translationLbl.Text,fontsize))
			Return
		End If
		Dim html As String
		html=editDistance.showDiff(sourceTextArea.Text,sourceLbl.Text,fontsize).Replace("</body>","<p>"&translationLbl.Text&"</p></body>")
		LoadHTMLWithBackground(LogWebView,html)
	End If

End Sub

Public Sub LoadHTMLWithBackground(wv As WebView,html As String)
	Dim bgColor,highlightColor,textColor As String
    textColor="black"
	
	If preferencesMap.GetDefault("darktheme",False)=True Then
		bgColor="#95999C"
		highlightColor="#C80000"
	End If
	
	If preferencesMap.GetDefault("customCSS_enabled",False)=True Then
		bgColor=Theme.WebViewBGColor(preferencesMap.GetDefault("customCSSDir",File.DirApp))
		textColor=Theme.WebViewTextColor(preferencesMap.GetDefault("customCSSDir",File.DirApp))
	End If
	
	If bgColor<>"" Then
		html=html.Replace("<body>","<body bgcolor="&bgColor&" text="&textColor&">")
		If highlightColor<>"" Then
			html=html.Replace($"color="red""$,$"color="${highlightColor}""$)
		End If
		If html="" Then
			Dim s As StringBuilder
			s.Initialize
			s.Append("<!DOCTYPE html>")
			s.Append("<html>")
			s.Append("<body bgcolor="&bgColor&" text="&textColor&">")
			s.Append("</body>")
			s.Append("</html>")
			html=s.ToString
		End If
	End If
	
	wv.LoadHtml(html)
End Sub

Sub searchTableView_Action
	Dim mi As MenuItem
	mi=Sender
	Select mi.Text
		Case "Go to the segment"
			If searchTableView.SelectedRowValues<>Null Then
				Dim lbl As Label=searchTableView.SelectedRowValues(0)
				Dim index As Int
				index=lbl.Text
				ScrollTo(index)
			End If
	End Select
End Sub

Sub segmentSearchToggleButton_SelectedChange(Selected As Boolean)
	'toggleTableOrTextArea(Selected,segmentSearchToggleButton,contextWebView,searchTableView)
	toggleTableOrWebView(Selected,segmentSearchToggleButton,contextWebView,searchTableView)
End Sub

Sub TMViewToggleButton_SelectedChange(Selected As Boolean)
	toggleTableOrTextArea(Selected,TMViewToggleButton,viewTMTextArea,tmTableView)
End Sub

Public Sub changeWhenSegmentOrSelectionChanges
	If TabPane1.SelectedIndex=1 Then
		If segmentSearchToggleButton.Selected=False Then
			segmentSearchToggleButton_SelectedChange(False)
		End If
	Else
		If TMViewToggleButton.Selected=False Then
			TMViewToggleButton_SelectedChange(False)
		End If
	End If
End Sub

Sub toggleTableOrWebView(selected As Boolean,tb As ToggleButton, wv As WebView,tv As TableView)
	If selected Then
		tb.Text="L"
		tv.Visible=True
	Else
		Dim html As String
		Dim htmlhead As String
		htmlhead=$"<!DOCTYPE HTML><html><head><meta charset="utf-8" />
		<style type="text/css">
		p {font-size: 18px}
		#selected {color:green;}
		</style></head><body>"$
		Dim htmlend As String
		htmlend="</body></html>"
		tb.Text="C"
		tv.Visible=False
		Dim index As Int=0
		For Each row() As Object In tv.Items
			index=index+1
			Dim sourceLbl,targetLbl As Label
			sourceLbl=row(1)
			targetLbl=row(2)
			html=html&index&"<br/>"&sourceLbl.Text.Replace(searchTableView.Tag,$"<span id="selected">${searchTableView.Tag}</span>"$)&"<br />"&targetLbl.Text.Replace(searchTableView.Tag,$"<span id="selected">${searchTableView.Tag}</span>"$)&"<br />"&"<br />"
		Next
		LoadHTMLWithBackground(wv,htmlhead&html&htmlend)
	End If
End Sub

Sub toggleTableOrTextArea(selected As Boolean,tb As ToggleButton, ta As TextArea,tv As TableView)
	If selected Then
		tb.Text="L"
		tv.Visible=True
	Else
		tb.Text="C"
		tv.Visible=False
		ta.Text=""
		Dim index As Int=0
		For Each row() As Object In tv.Items
			Dim sourceLbl,targetLbl As Label
			sourceLbl=row(1)
			targetLbl=row(2)
			index=index+1
			ta.Text=ta.Text&index&CRLF&sourceLbl.Text&CRLF&targetLbl.Text&CRLF&CRLF
		Next
	End If
End Sub

Public Sub updateSegmentLabel(current As String,total As String)
	segmentLabel.Text=(current+1)&"/"&total
End Sub

Public Sub getLeft As Double
	'Return MainForm.WindowLeft+mainSplitPane.DividerPositions(0)*mainSplitPane.Width+editorLV.AsView.Left
	Dim robot As AWTRobot
	Return robot.RobotMouseCurrentLocation(0)-MainForm.WindowLeft
End Sub

Public Sub getTop As Double
	'Return MainForm.WindowTop+(1-rightSplitPane.DividerPositions(0))*rightSplitPane.Height+editorLV.AsView.Top
	Dim robot As AWTRobot
	Return robot.RobotMouseCurrentLocation(1)-MainForm.WindowTop
End Sub

Public Sub updateSavedTime
	operationLabel.Text="Project saved at "&DateTime.Time(DateTime.Now)
End Sub

Public Sub updateOperation(info As String)
	operationLabel.Text=info
	If info.Contains("generated!") Then
	    TargetFileGeneratingProgress.Done=TargetFileGeneratingProgress.Done+1
		If TargetFileGeneratingProgress.Done=TargetFileGeneratingProgress.Total And TargetFileGeneratingProgress.Done>1 Then
			operationLabel.Text="Generating Completed"
			TargetFileGeneratingProgress.Total=0
			TargetFileGeneratingProgress.Done=0
		End If
	End If
End Sub

Public Sub addCheckList(matches As List,entry As Int,context As String)
	Try
		TabPane1.SelectedIndex=2
		checkLV.Items.Clear
		Dim match As Map=matches.Get(0)
		Log("match"&match)
		'match.Get("shortMessage")
		'Dim context As Map
		Dim message As String
		message=match.Get("message")
		'context=match.Get("context")
		Dim replacements As List
		replacements=match.Get("replacements")
		Dim offset,length As Int
		offset=match.Get("offset")
		length=match.Get("length")
		Log("offset"&offset)
		Log(context)
		Dim tf As TextFlow
		tf.Initialize
		tf.AddText("message:").SetUnderline(True)
		tf.AddText(" "&message&CRLF)
		tf.AddText("context: "&context.SubString2(0,offset))
		tf.AddText(context.SubString2(offset,offset+length)).SetColor(fx.Colors.Red)
		tf.AddText(context.SubString2(offset+length,context.Length))
		Dim p As Pane=tf.CreateTextFlow
		p.SetSize(checkLV.Width,Utils.MeasureMultilineTextHeight(fx.DefaultFont(15),checkLV.Width,tf.getText))
		Dim tagList As List
		tagList.Initialize
		tagList.Add(matches)
		tagList.Add(entry)
		p.Tag=tagList
		checkLV.Items.Add(p)
		For Each replace As Map In replacements
			Dim replacement As String
			replacement=replace.Get("value")
			Dim values As List
			values.Initialize
			values.Add(offset)
			values.Add(length)
			values.Add(replacement)
			values.Add(entry)
			values.Add(matches)
			Dim lbl As Label
			lbl.Initialize("")
			lbl.Text="replacement: "&replacement
			lbl.Tag=values
			checkLV.Items.Add(lbl)
		Next
	Catch
		Log(LastException)
End Try
End Sub

Public Sub getCheckLVSize As Int
	Return checkLV.Items.Size
End Sub

Public Sub checkLVClear
	checkLV.Items.Clear
End Sub

Public Sub noErrors
	checkLV.items.Clear
	checkLV.Items.Add(Utils.LabelWithText("No errors"))
End Sub

Sub checkLV_MouseClicked (EventData As MouseEvent)
	If checkLV.SelectedItem<>Null Then
		Dim index As Int=checkLV.SelectedIndex
		Dim value As Object
		If checkLV.SelectedItem Is Pane Then
			Dim p As Pane=checkLV.SelectedItem
			value=p.tag
		else if checkLV.SelectedItem Is Label Then
			Dim lbl As Label=checkLV.SelectedItem
			value=lbl.Tag
		Else
			value=""
		End If	
		checkLV.Items.Clear
		Try
			If index=0 Then
				Dim tagList As List
				tagList=value
				Dim matches As List=tagList.Get(0)
				Dim entry As Int
				entry=tagList.Get(1)
				If matches.Size>1 Then
					matches.RemoveAt(0)
					currentProject.showReplacements(matches,entry)
				End If
			Else
				If value<>"" Then
					Dim tagList As List
					tagList=value
					Dim offset,length,entry As Int
					offset=tagList.Get(0)
					length=tagList.Get(1)
					Dim replacement As String
					replacement=tagList.Get(2)
					entry=tagList.Get(3)
					Dim p As Pane
					p=editorLV.Items.Get(entry)
					Dim targetTextArea As RichTextArea
					targetTextArea=p.GetNode(1).Tag
					targetTextArea.Text=targetTextArea.Text.SubString2(0,offset)&replacement&targetTextArea.Text.SubString2(offset+length,targetTextArea.Text.Length)
					Sleep(0)
					targetTextArea.SetSelection(targetTextArea.Text.Length,targetTextArea.Text.Length)
					targetTextArea.RequestFocus
				End If
			End If
		Catch
			Log(LastException)
		End Try
	End If
End Sub

Sub addPositionChangedEvent(divider As Object,eventName As String)
	Dim Obj As Reflector
	Obj.Target = divider
	Obj.AddChangeListener(eventName, "positionProperty")
End Sub

Sub dividerPosition_changed(old As Object, new As Object)
	CallSubDelayed(Me,"TermPane_Resize")
	CallSubDelayed(Me,"ListViewParent_Resize")
End Sub

Sub TermPane_Resize
	For Each p As Pane In termLV.Items
		p.SetSize(termLV.Width,p.Height)
	Next
End Sub

Sub lbl_MouseClicked (EventData As MouseEvent)
	If EventData.PrimaryButtonPressed Then
		Dim lbl As Label
		lbl=Sender
		Log(lbl.Text)
		Select lbl.Text
		
			Case "Project Files"

			Case "Translation Memory"
				Dim tmm As TMManager
				tmm.Initialize
				tmm.Show
			Case "Terminology"
				Dim termm As TermManager
				termm.Initialize
				termm.show
			Case "Preview"
				If pre.IsInitialized=False Then
					pre.Initialize
				End If
				If pre.isShowing=False Then
					pre.Show
				End If
			Case "Statistics"
				Dim st As statistics
				st.Initialize
				st.Show
		End Select
	End If
End Sub

Public Sub setLabelFont(lbl As Label,name As String)
	If preferencesMap.ContainsKey(name) Then
		Dim fontPreference As Map
		fontPreference=preferencesMap.Get(name)
		Dim familyName As String
		familyName=fontPreference.get("FamilyName")
		Dim size As Int
		size=fontPreference.get("Size")
		lbl.Font=fx.CreateFont(familyName,size,False,False)
	Else
		lbl.Font=fx.DefaultFont(16)
	End If
	Log(lbl.font.Size)
End Sub

Public Sub setTextAreaStyle(ta As RichTextArea,FontNameKey As String)
	If ta.UseTextArea=False Then
		Dim cssPath As String
		If File.Exists(currentProject.path,"config/richtext.css") Then
			cssPath=File.Combine(currentProject.path,"config/richtext.css")
		Else
			cssPath=File.Combine(File.DirData("BasicCAT"),"richtext.css")
			File.WriteString(cssPath,"",Utils.richTextCSS)
		End If
		'ta.GetObjectJO.RunMethodJO("getStylesheets",Null).RunMethod("clear",Null)
		ta.GetObjectJO.RunMethodJO("getStylesheets",Null).RunMethod("add",Array(File.GetUri(cssPath,"")))
	End If
	
	If preferencesMap.GetDefault("customCSS_enabled",False)=True Then
		Dim cssDir As String=preferencesMap.GetDefault("customCSSDir",File.DirApp)
		Dim rgb As String=Theme.RichTextBGColorRGB(cssDir)
		Dim bgcolor As Paint=Theme.RichTextBGColor(cssDir)
		If ta.UseTextArea Then
			CSSUtils.SetStyleProperty(ta.ta,"-fx-control-inner-background","rgb("&rgb&")")
			'CSSUtils.SetBackgroundColor(ta.ta,bgcolor)
		Else
			CSSUtils.SetBackgroundColor(ta.GetObject,bgcolor)
			ta.HighLightColor=Theme.RichTextHighLightColor(cssDir)
			ta.DefaultBorderColor=Theme.RichTextBorderColor(cssDir)
			ta.DefaultBorderWidth=Theme.RichTextBorderWidth(cssDir)
			ta.AdjustBorder(False)
		End If
	Else
		If preferencesMap.GetDefault("darktheme",False) Then
			If ta.UseTextArea Then
				CSSUtils.SetStyleProperty(ta.ta,"-fx-control-inner-background","rgb(151,152,154)")
				'CSSUtils.SetBackgroundColor(ta.ta,bgcolor)
			Else
				CSSUtils.SetBackgroundColor(ta.GetObject,fx.Colors.RGB(151,152,154))
				ta.HighLightColor=fx.Colors.ARGB(150,51,51,51)
			End If
		End If
	End If
	
	If preferencesMap.ContainsKey(FontNameKey) Then
		Dim fontPreference As Map
		fontPreference=preferencesMap.Get(FontNameKey)
		Dim familyName As String
		familyName=fontPreference.get("FamilyName")
		Dim size As Int
		size=fontPreference.get("Size")
		ta.FontFamily=familyName
		ta.FontSzie=size
		If ta.UseTextArea Then
			CSSUtils.SetStyleProperty(ta.ta,"-fx-font-family",familyName)
			CSSUtils.SetStyleProperty(ta.ta,"-fx-font-size",size)
		End If
	End If
End Sub

Public Sub addTextAreaToSegmentPane(segmentpane As Pane,source As String)
	If currentProject.IsInitialized Then
		currentProject.addTextAreaToSegmentPane(segmentpane,source,"")
	End If
End Sub

Public Sub changeAutoSaveInterval(seconds As Int)
	Try
		projectAutoSaver.Interval=seconds*1000
	Catch
		Log(LastException)
	End Try
End Sub

Public Sub enableAutosaveTimer(enabled As Boolean)
	If projectAutoSaver.IsInitialized Then
		projectAutoSaver.Enabled=enabled
	End If
End Sub

Sub MainForm_FocusChanged (HasFocus As Boolean)
	If HasFocus Then
		Log("mainform has focus")
		If currentProject.IsInitialized Then
			If editorLV.Items.Size<>0 Then
				Try
					Dim p As Pane
					p=editorLV.Items.Get(currentProject.lastEntry)
				Catch
					Return
				End Try
				MenuBar1.RequestFocus
				Dim targetTextArea As RichTextArea=p.GetNode(1).Tag
				targetTextArea.RequestFocus
			End If
		End If
	End If
End Sub

Sub editorLV_Action
	Dim mi As MenuItem=Sender
	Select mi.Text
		Case "Deselect"
			editorLV.SelectedIndex=-1
	End Select
End Sub
